package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	//"streaming mode" files are individually open and read
	counts := make(map[string]int)
	files := []string{"./input.txt", "./input2.txt"} //os.Args[1:]
	if len(files) == 0 {
		//countLines(os.Stdin, counts)
		countLines(os.Stdin, counts, "empty")
	} else {
		for _, arg := range files {
			f, err := os.Open(arg) //open a file and read it into a byte slice
			if err != nil {
				fmt.Fprintf(os.Stderr, "dup2: %v\n", err) // takes in var and affs it to the writer to print
				continue
			}
			countLines(f, counts, arg)
			//countLines(f, counts)
			f.Close()
		}
	}
	for line, n := range counts {
		if n > 1 {
			//fmt.Printf("filename: %s\n")
			dat := strings.Split(line, "./")
			dupline := string(dat[0])
			filename := string(dat[1])
			fmt.Printf("%s\t%d\t%s\n", filename, n, dupline)
			//fmt.Printf("%d\t%s\n", n, line)
		}
	}
}

func countLines(f *os.File, counts map[string]int, filename string) {
	input := bufio.NewScanner(f) // returns a scanner to read from input f
	// iterate though the scanner with input f and returns boolean true as long as there is a token present from the input
	for input.Scan() {
		// Text() returns most recent token generated by Scan() as a string
		// stores the string as a key
		// if there is a key it will create the count in value
		// duplicate keys add a incremented count to their value
		counts[input.Text()+filename]++
		//counts[input.Text()]++
	}
	// NOTE: ignoring potential errors from input.Err()
}
